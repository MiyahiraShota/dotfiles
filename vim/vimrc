if !&compatible
  set nocompatible
endif

" reset augroup
augroup MyAutoCmd
	autocmd!
augroup END

" dein settings {{{
" dein自体の自動インストール
let s:cache_home = empty($XDG_CACHE_HOME) ? expand('~/.cache') : $XDG_CACHE_HOME
let s:dein_dir = s:cache_home . '/dein'
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
if !isdirectory(s:dein_repo_dir)
	  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))
endif
let &runtimepath = s:dein_repo_dir .",". &runtimepath
" プラグイン読み込み＆キャッシュ作成
let s:toml_file = fnamemodify(expand('<sfile>'), ':h').'/dein.toml'
if dein#load_state(s:dein_dir)
	call dein#begin(s:dein_dir)
	call dein#load_toml(s:toml_file)
	call dein#end()
	call dein#save_state()
endif
" 不足プラグインの自動インストール
if has('vim_starting') && dein#check_install()
	call dein#install()
endif
" }}}

" プラグイン以外のその他設定が続く
" :

if has("syntax")
    syntax on
endif

set background=dark
colorscheme hybrid

set number
set title
set ambiwidth=double
set smartindent
set virtualedit=block
set cursorline

" tab
set tabstop=2
set autoindent
set expandtab
set shiftwidth=2

" ハイライトしない
set nohlsearch


" swapファイルを削除
set noswapfile

set list listchars=tab:\¦\ 

" ------ ステータスライン --------
set laststatus=2 " ステータスラインを常に表示
set showmode " 現在のモードを表示
set showcmd " 打ったコマンドをステータスラインの下に表示
set ruler " ステータスラインの右側にカーソルの現在位置を表示する
set backspace=indent,eol,start " バックスペースを使えるように

" NERDTreeToggle
nnoremap se :NERDTreeToggle<CR>

" 間違えそうなバインドを調整(事故の素) 
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap ; :
cmap w1 w!
cmap q1 q!

" 使いたくないバインドを殺す
nnoremap ZZ <Nop>
" ZQで終了させない
nnoremap ZQ <Nop>
" QでEXモードに入れない
nnoremap Q <Nop>

" jjでエスケープ
inoremap jj    <ESC>
" c-lでエスケープ
inoremap <C-l> <ESC>
inoremap <C-l> <ESC>
vnoremap <C-l> <ESC>


" 行移動は表示にあわせる
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" 右移動は折りたたみを開くも兼ねる
nnoremap <expr>l  foldclosed('.') != -1 ? 'zo' : 'l'

" 権限の無いファイル用sudoで書き込み
cnoremap w!! w ! sudo tee %

" vを二回で行末まで選択
vnoremap v $h

"---------------------------------------------------------------------------
" タブ操作
"---------------------------------------------------------------------------
nmap T :tabnew<CR>
nmap <silent> tn :tabnext<CR>
nmap <silent> tp :tabprevius<CR>
nmap <silent> te :tabedit<space>a
" タブ移動のショートカット
nnoremap <c-g> <nop>
nnoremap <c-g> gt
imap <buffer> <c-g> <c-o><c-g>
" タブを閉じる
nmap tc :tabc<CR>


"---------------------------------------------------------------------------
" ウィンドウ操作
"---------------------------------------------------------------------------
" インサートモード中でも c-wが使えるようにする 
inoremap <c-w> <c-o><c-w>

" リサイズ
nmap <silent> <C-L> <C-w>>
nmap <silent> <C-H> <C-w><
nmap <silent> <C-K> <C-w>+
nmap <silent> <C-J> <C-w>>

" 移動
nmap <C-j> <C-w>w
nmap <C-k> <C-w>W
nmap <C-h> <C-w><
nmap <C-l> <C-w>>

"---------------------------------------------------------------------------
" Nerdtree
"---------------------------------------------------------------------------
let g:NERDTreeShowBookmarks=1

"---------------------------------------------------------------------------
" emmet
"---------------------------------------------------------------------------
" insertモードの時
imap <C-e> <C-y>,<CR>


"---------------------------------------------------------------------------
" コメントアウト
"---------------------------------------------------------------------------
nmap <Space>co gcc
vmap <Space>co gcc

"---------------------------------------------------------------------------
" fzf
"---------------------------------------------------------------------------
function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files
  else
    :GitFiles
  endif
endfun

nmap <C-c> :call FZFOpen(':Commands')<CR>
nmap <C-p> :call FZFOpen(':call FzfOmniFiles()')<CR>
nmap <C-g> :call FZFOpen(':Rg')<CR>

"---------------------------------------------------------------------------
" status line
"---------------------------------------------------------------------------
" vim-gitgutter
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_removed = 'x'

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'gitgutter', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \   'gitgutter': 'MyGitGutter'
      \ },
      \ }

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

"---------------------------------------------------------------------------
" vue js
"---------------------------------------------------------------------------
autocmd FileType vue syntax sync fromstart


"---------------------------------------------------------------------------
" ※記号入力時にずれる問題対策
"---------------------------------------------------------------------------
set ambiwidth=double
